<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>audit-tool</artifactId>
        <groupId>io.bdrc.am</groupId>
        <version>0.9-SNAPSHOT-1</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>audit-test-shell</artifactId>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>14</source>
                    <target>14</target>
                </configuration>
            </plugin>
            <!-- jimk: package in a jar file, with dependencies -->
            <!-- per https://stackoverflow.com/questions/9689793/cant-execute-jar-file-no-main-manifest-attribute?rq=1 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>io.bdrc.am.audit.shell.shell</mainClass>
                        </manifest>
                    </archive>
                    <excludes>
                        <exclude>scripts</exclude>
                        <exclude>resources</exclude>
                    </excludes>
                </configuration>

            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>copy-resources-to-package</id>
                        <!-- here the phase you need -->
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/output/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/scripts</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-to-compile-output</id>
                        <!-- here the phase you need -->
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/scripts</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>io.bdrc.am.audit.shell.shell</mainClass>
                        </manifest>
                    </archive>
                    <descriptors>
                        <descriptor>${project.build.sourceDirectory}/assembly/shell-assembly.xml</descriptor>
                    </descriptors>
                    <!--<descriptorRefs>-->
                    <!--&lt;!&ndash;<descriptorRef>jar-with-dependencies</descriptorRef>&ndash;&gt;-->
                    <!--<descriptorRef>${project.build.sourceDirectory}/assembly/shell-assembly.xml</descriptorRef>-->
                    <!--</descriptorRefs>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.akman</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <version>0.1.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jpackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>

                    <!--
                      Specifies the JDK home path which provides the tool needed.
                      If not specified the jpackage tool executable will be find in
                      the following order:

                        - user specified JDK home directory by toolchains-plugin
                        - JDK home directory specified by system variable JAVA_HOME
                        - system path specified by system variable PATH

                    <toolhome>${env.JPACKAGE_HOME}</toolhome>
                    -->

                    <!--
                      Specifies the location in which generated output files are placed.
                      Default value: ${project.build.directory}/jpackage
                    -->
                    <dest>${project.build.directory}/jpackage</dest>

                    <!--
                      Specifies the name of subdirectory relative to the destination
                      directory in which files of generated application image are placed.
                    -->
                    <name>audit-tool</name>

                    <!--
                      Specifies the type of package to
                      create: { PLATFORM | IMAGE | EXE | MSI }.
                      Default value: PLATFORM (a platform dependent default type)

                    <type>IMAGE</type>
                     -->

                    <!--
                      Specifies the location of the predefined runtime
                      image (result of jlink) that will be copied into
                      the application image.
                      If not specified, jpackage will run jlink to create
                      the runtime image using options:
                        - strip-debug
                        - no-header-files
                        - no-man-pages
                        - strip-native-commands
                    -->
                    <runtimeimage>${project.build.directory}/jlink/runtime-image</runtimeimage>

                    <!--
                      Specifies version of the application and/or package.
                    -->
                    <appversion>1.9</appversion>

                    <!--
                      Specifies copyright for the application.
                    -->
                    <copyright>Copyright 2020-2022, Buddhist Digital Resource Center</copyright>

                    <!--
                      Specifies description of the application.
                    -->
                    <description>Validates data sets against BDRC image standards</description>

                    <!--
                      Specifies vendor of the application.
                    -->
                    <vendor>Buddhist Digital Resource Center</vendor>

                    <!--
                      Specifies the location of the icon of the application package.

                    <icon>${project.basedir}/config/jpackage/resources/appname.ico</icon>
                          -->

                    <!--
                    TODO: try the module and class
                      Specifies the main module (and optionally main class) of
                      the application. This module must be located on the module path.
                      When this option is specified, the main module will be linked
                      in the Java runtime image.
                      Either module or main-jar option can be specified
                      but not both. -->
                    <module>audit.test.shell/main</module>
                   <input>${project.build.outputDirectory}</input>

                    <!--
                      Specifies the command line arguments to pass to the main class
                      if no command line arguments are given to the launcher.
                    -->
                    <arguments>--opt</arguments>

                    <!--
                      Specifies the options to pass to the Java runtime.
                    -->
                    <javaoptions>-Dfile.encoding=UTF-8 -Xms256m -Xmx512m</javaoptions>

                    <!--
                      Specifies options are added to, or used to overwrite,
                      the original command line options to build additional
                      alternative launchers.

                    <addlaunchers>
                        <addlauncher>
                            <name>appname-cli</name>
                            <module>appModuleName/appClassName</module>
                            <arguments> - - help</arguments>
                            <javaoptions>-Xms256m -Xmx512m</javaoptions>
                            <appversion>1.0</appversion>
                            <icon>${project.basedir}/config/jpackage/resources/appname-cli.ico</icon>
                            <winconsole>true</winconsole>
                        </addlauncher>
                    </addlaunchers>
                                    -->

                    <!--
                      Specifies the location of a resources directory that override
                      jpackage resources. Icons, template files, and other resources
                      of jpackage can be overridden by adding replacement resources
                      to this directory.

                    <resourcedir>${project.basedir}/config/jpackage/resources</resourcedir>
                    -->
                </configuration>

            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/scripts</directory>
            </resource>
        </resources>
    </build>
    <dependencies>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.14.0</version>
        </dependency>

        <!--<dependency>-->
        <!--<groupId>org.apache.logging.log4j</groupId>-->
        <!--<artifactId>log4j-api</artifactId>-->
        <!--<version>RELEASE</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>org.apache.logging.log4j</groupId>-->
        <!--<artifactId>log4j-core</artifactId>-->
        <!--<version>RELEASE</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>io.bdrc.am</groupId>
            <artifactId>audit-test-interface</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>io.bdrc.am</groupId>-->
        <!--<artifactId>audit-test-lib</artifactId>-->
        <!--<version>1.0-SNAPSHOT</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.slf4j</groupId>-->
            <!--<artifactId>slf4j-api</artifactId>-->
            <!--<version>2.0.0-alpha1</version>-->
            <!--<scope>compile</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>io.bdrc.am</groupId>
            <artifactId>audit-test-lib</artifactId>
            <version>0.9-SNAPSHOT-1</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

</project>