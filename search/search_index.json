{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Asset Manager Documentation About this site This is the project website for the Buddhist Digital Resource Center Asset Manager project.","title":"Home"},{"location":"#asset-manager-documentation","text":"","title":"Asset Manager Documentation"},{"location":"#about-this-site","text":"This is the project website for the Buddhist Digital Resource Center Asset Manager project.","title":"About this site"},{"location":"design/design/","text":"Asset Manager Design Goals Shareable Objects Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs Validation Dynamic Discovery Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders) Architecture Research One way to have a deliverable which presents the same UI would be to deliver a local website to the Audit Data users and have a central website (or sites) for Asset Manager. Test site First pass tries to share models and views in a site:","title":"Asset Manager Design"},{"location":"design/design/#asset-manager-design","text":"","title":"Asset Manager Design"},{"location":"design/design/#goals","text":"","title":"Goals"},{"location":"design/design/#shareable-objects","text":"Use the same code for data entities and other processing which are common to both level processes: + Submission packages + Metadata + Test initiators + Test Results + Logs","title":"Shareable Objects"},{"location":"design/design/#validation-dynamic-discovery","text":"Some operations involve a set of tests against an object. Tests will be discoverable, and will be written in terms of an interface: a template which developers can use to extend the set of tests. The goal is to allow a developer to create or modify tests without a full release of the framework. These tests are best grouped by the object of the test, such as a delivery packet, a folder, or a work folder structure (e.g. files and folders)","title":"Validation Dynamic Discovery"},{"location":"design/design/#architecture","text":"","title":"Architecture"},{"location":"design/design/#research","text":"One way to have a deliverable which presents the same UI would be to deliver a local website to the Audit Data users and have a central website (or sites) for Asset Manager.","title":"Research"},{"location":"design/design/#test-site","text":"First pass tries to share models and views in a site:","title":"Test site"},{"location":"req/requirements/","text":"Asset Manager Requirements Overview The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field. Referenced documents [1] Digitization standards Folder Structure [2] bdrc-audit prototype to do list Definitions Work A Work is the denomination of submitted content. The work's name is its \"key\" field, and is its well-known name. Submittal A submittal, or submission, is the content of the \"work,\" along with metadata which directs its entry into the Asset Manager (for example, the work name) As in any good software practice, the public name of a work or submittal is editable, while its internal identifier remains unchanged. Scope of Asset Manager Acquisition channels The Asset Manager will process new scanned packages, but will also maintain an inventory of our backlog of unpublished assets. It will support the three channels of acquisition: The previously submitted backlog of catalogued holdings, which need processing before they are suitable for deployment. The output of ongoing BDRC managed projects, such as USAID, EAP, FPL, and ACIP Mongolia Unsolicited input in a variety of formats. Partial Progress A complete content package contains three copies of the content, in containers named: sources archive web Sources is the unprocessed output of the scanning device or camera, or of software. Archive is ??? Web is the processed images which are suitable for download. BDRC contributors do not always present all the copies of the content at the same time. Often, the web deliverable is the first to arrive. Asset Manager presents a packaging interface which supports partial submittals and tracking of submittal progress. Asset Manager user profiles The Asset Manager suite supports different profiles of users. There is no current requirement to restrict functionality by user. If a user has access to the application, they can perform any function on it. The Asset Manager never deletes a resource, it only changes the state information of the resource's metadata. All those changes are reversible. User communities are: BDRC library users: These are our end consumers of tbrc.org .Their capacity to use the TBRC website is determined by their computers' image processing and network power. One end of capability, is graphics workstations attached to the Internet backbone. At the other end, they are Nepali or Tibetan monks referring to an image on a cell phone served by a 2 or 3G cellular service. Field scanning staff: This group contains all the BDRC employees and contractors who perform the first level of scanning, review, and intake of digital media. Reference 1 contains details of these user profiles. Curation staff: These are the BDRC archivists and librarians who manage the processing and deployment of BDRC holdings. Functional Requirements This document groups the Asset Manager requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards. The Audit Tool functionality will be in the Asset Manager: Audit Tool is a repackaging designed for installation in remote systems. Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume. Audit Tool The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity. Asset Manager The Asset Manager use case is shown below: The Asset Manager includes the auditing tools and also provides management facilities for tracking submission progress, image processing and web deployment. All the specific areas below will present interfaces for changing a submittal's state. Workflow High level flowchart of Asset Manager and Audit tool Asset Manager functionality This section lists the functions of the asset manager. Review Users access a dashboard which shows the processing status of collections which are awaiting processing. Test submission Perform the same tests as the Audit Tool does. Process Control Users control the image processing: launch and monitor processing workflows. Image processing Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a de-skewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output Derived image creation Create derivative file formats form the archival masters. OCR Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD. Web deployment Deploy some of the derivative works and selected metadata to the BDRC display platforms. Asset manager will allow updating of sections of works at any level of granularity from the work down to the individual image. Shared Requirements These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README See Test Requirements for detailed requirements. Number of files per folder File Type Requirement Canonical paths Audit biblio-sheet Validate upload package Detailed Requirements Audit Tool Host Platform The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool. Invocation Configuration The user should be able to set some test parameters (for example, resolution) differently for each test instance. Launch The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans. Operation Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package perform tests the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results. Test Requirements documents each test's parameters and success criteria. Enter biblio-data The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. The biblio-data might be what the scanning operator or their project manager input into the spreadsheet (see Bibliographic Data Sheet ) Implementation note: The python xlrd package supports extracting data from an Excel sheet. If we truly require input sheets to be .xlsx format, we could consider expanding the biblio-sheet to include the data which auditing requires. That would validate the biblio sheet first. ) The biblio sheet must include at a minimum: Work Name Volumes Names Scan Date BDRC Contract identifier Scanning Requirements specific to the contract Info on person who scanned the document (BDRC ref number, or email, or name, or some combination) Any other information the Asset Manager requires This will be an ongoing requirement. The Audit tool validation mechanism may be changed with every release. If needed, it will provide the Excel template for the biblio-data. Build upload package The user invokes the build package through the user interface. The system: runs all the required tests. If they pass, it builds the upload package only if this invocation of the tests passes. The upload package contains: - production information: - Scanning organization - BDRC Personnel sign-off: - DPE - FR - DPM - submitter id: a valid email address for the submitter. - work information: (see biblio-data above) The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it. Package Uploader Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur. [^12b45fa9] [^12b45fa9]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Asset Manager Requirements"},{"location":"req/requirements/#asset-manager-requirements","text":"","title":"Asset Manager Requirements"},{"location":"req/requirements/#overview","text":"The Asset Manager project intends to meet two important BDRC needs: Reduce the backlog of images which we have scanned and catalogued, but are not yet available to the web users. Enhance the integrity of new scans by allowing iterations of scanning, review, changes, and re-scanning in the field.","title":"Overview"},{"location":"req/requirements/#referenced-documents","text":"[1] Digitization standards Folder Structure [2] bdrc-audit prototype to do list","title":"Referenced documents"},{"location":"req/requirements/#definitions","text":"Work A Work is the denomination of submitted content. The work's name is its \"key\" field, and is its well-known name. Submittal A submittal, or submission, is the content of the \"work,\" along with metadata which directs its entry into the Asset Manager (for example, the work name) As in any good software practice, the public name of a work or submittal is editable, while its internal identifier remains unchanged.","title":"Definitions"},{"location":"req/requirements/#scope-of-asset-manager","text":"","title":"Scope of Asset Manager"},{"location":"req/requirements/#acquisition-channels","text":"The Asset Manager will process new scanned packages, but will also maintain an inventory of our backlog of unpublished assets. It will support the three channels of acquisition: The previously submitted backlog of catalogued holdings, which need processing before they are suitable for deployment. The output of ongoing BDRC managed projects, such as USAID, EAP, FPL, and ACIP Mongolia Unsolicited input in a variety of formats.","title":"Acquisition channels"},{"location":"req/requirements/#partial-progress","text":"A complete content package contains three copies of the content, in containers named: sources archive web Sources is the unprocessed output of the scanning device or camera, or of software. Archive is ??? Web is the processed images which are suitable for download. BDRC contributors do not always present all the copies of the content at the same time. Often, the web deliverable is the first to arrive. Asset Manager presents a packaging interface which supports partial submittals and tracking of submittal progress.","title":"Partial Progress"},{"location":"req/requirements/#asset-manager-user-profiles","text":"The Asset Manager suite supports different profiles of users. There is no current requirement to restrict functionality by user. If a user has access to the application, they can perform any function on it. The Asset Manager never deletes a resource, it only changes the state information of the resource's metadata. All those changes are reversible. User communities are: BDRC library users: These are our end consumers of tbrc.org .Their capacity to use the TBRC website is determined by their computers' image processing and network power. One end of capability, is graphics workstations attached to the Internet backbone. At the other end, they are Nepali or Tibetan monks referring to an image on a cell phone served by a 2 or 3G cellular service. Field scanning staff: This group contains all the BDRC employees and contractors who perform the first level of scanning, review, and intake of digital media. Reference 1 contains details of these user profiles. Curation staff: These are the BDRC archivists and librarians who manage the processing and deployment of BDRC holdings.","title":"Asset Manager user profiles"},{"location":"req/requirements/#functional-requirements","text":"This document groups the Asset Manager requirements into three buckets: Audit Tool : The requirements for a component which allows BDRC field managers to review a submission and approve or reject it. Asset Manager : A platform which allows a user to: Review status of scans: not started, underway, complete Validate that packages meet standards. The Audit Tool functionality will be in the Asset Manager: Audit Tool is a repackaging designed for installation in remote systems. Invoke image processing tools to prepare images for web deployment. Deploy works to the BDRC web. Shared Requirements Testing: Provide tests in a code format which both tools can use Reporting: show the passing or failing of tests, and the processing results of processing steps Package building: A component which creates a package which Audit Tool and Asset Manager can consume.","title":"Functional Requirements"},{"location":"req/requirements/#audit-tool","text":"The Audit Tool use case is shown here: The audit tool supports multiple users who can submit, review, and approve or reject submissions. It also supports transferring to asset manager a package which contains both the content and the required metadata. It has limited reporting capability, as it is meant to be decentralized, and work only on standalone computers, operating on a local disk. In the diagram above, \"Run Tests\" means to run a specified set of tests to evaluate the submission's integrity.","title":"Audit Tool"},{"location":"req/requirements/#asset-manager","text":"The Asset Manager use case is shown below: The Asset Manager includes the auditing tools and also provides management facilities for tracking submission progress, image processing and web deployment. All the specific areas below will present interfaces for changing a submittal's state.","title":"Asset Manager"},{"location":"req/requirements/#workflow","text":"High level flowchart of Asset Manager and Audit tool","title":"Workflow"},{"location":"req/requirements/#asset-manager-functionality","text":"This section lists the functions of the asset manager.","title":"Asset Manager functionality"},{"location":"req/requirements/#review","text":"Users access a dashboard which shows the processing status of collections which are awaiting processing.","title":"Review"},{"location":"req/requirements/#test-submission","text":"Perform the same tests as the Audit Tool does.","title":"Test submission"},{"location":"req/requirements/#process-control","text":"Users control the image processing: launch and monitor processing workflows.","title":"Process Control"},{"location":"req/requirements/#image-processing","text":"Use external resources (either open source libraries, or possibly third party network APIs) to process images. Processing steps include: Determining values for the following parameters, and saving those into a recipe: optimal cropping box for the contents. a de-skewing transform, to remove any effects of image or camera tilt. some limited color correction Storing and linking output","title":"Image processing"},{"location":"req/requirements/#derived-image-creation","text":"Create derivative file formats form the archival masters.","title":"Derived image creation"},{"location":"req/requirements/#ocr","text":"Transmit images to a web service which will return text and other metadata. Further processing for this metadata is TBD.","title":"OCR"},{"location":"req/requirements/#web-deployment","text":"Deploy some of the derivative works and selected metadata to the BDRC display platforms. Asset manager will allow updating of sections of works at any level of granularity from the work down to the individual image.","title":"Web deployment"},{"location":"req/requirements/#shared-requirements","text":"These requirements are drawn from - Asset Manager v.01 Core Requirements - Asset Manager v-1.0 - And the to-do section of BDRC Audit Prototype README See Test Requirements for detailed requirements. Number of files per folder File Type Requirement Canonical paths Audit biblio-sheet Validate upload package","title":"Shared Requirements"},{"location":"req/requirements/#detailed-requirements","text":"","title":"Detailed Requirements"},{"location":"req/requirements/#audit-tool_1","text":"","title":"Audit Tool"},{"location":"req/requirements/#host-platform","text":"The Audit Tool has to be deployable by BDRC onto any MacOS or Windows 7+ PC within a reasonable length of time. The BDRC people should know how to configure the Audit Tool.","title":"Host Platform"},{"location":"req/requirements/#invocation","text":"","title":"Invocation"},{"location":"req/requirements/#configuration","text":"The user should be able to set some test parameters (for example, resolution) differently for each test instance.","title":"Configuration"},{"location":"req/requirements/#launch","text":"The Audit Tool should be callable from the command line of either platform. The command line invocation should either start a text-mode or a windowed dialog. The dialog prompts the user for the directory containing the scans.","title":"Launch"},{"location":"req/requirements/#operation","text":"Either of these prompts can be given as arguments 1. Prompt the user for the location of the single work to operate on. 2. Select the operation: - Perform Tests - Fill in biblio-data - Build package","title":"Operation"},{"location":"req/requirements/#perform-tests","text":"the user selects test from a list. Some tests are required, some are optional. The platform will show which is which. The system runs each test in turn, and records the results. The system displays the results. Test Requirements documents each test's parameters and success criteria.","title":"perform tests"},{"location":"req/requirements/#enter-biblio-data","text":"The system prompts the user for the bibliographical data. It saves the data in a format which the package builder will include. The biblio-data might be what the scanning operator or their project manager input into the spreadsheet (see Bibliographic Data Sheet ) Implementation note: The python xlrd package supports extracting data from an Excel sheet. If we truly require input sheets to be .xlsx format, we could consider expanding the biblio-sheet to include the data which auditing requires. That would validate the biblio sheet first. ) The biblio sheet must include at a minimum: Work Name Volumes Names Scan Date BDRC Contract identifier Scanning Requirements specific to the contract Info on person who scanned the document (BDRC ref number, or email, or name, or some combination) Any other information the Asset Manager requires This will be an ongoing requirement. The Audit tool validation mechanism may be changed with every release. If needed, it will provide the Excel template for the biblio-data.","title":"Enter biblio-data"},{"location":"req/requirements/#build-upload-package","text":"The user invokes the build package through the user interface. The system: runs all the required tests. If they pass, it builds the upload package only if this invocation of the tests passes. The upload package contains: - production information: - Scanning organization - BDRC Personnel sign-off: - DPE - FR - DPM - submitter id: a valid email address for the submitter. - work information: (see biblio-data above) The sign-offs are only required for the Asset Manager to intake the submittal package. A DPE or FR can sign their portions, but the DPM has to add their signature to the package before the Asset Manager will accept it.","title":"Build upload package"},{"location":"req/requirements/#package-uploader","text":"Upload the package. If the package passes the Validate upload package test, this facility transfers it to a resource where further processing can occur. [^12b45fa9] [^12b45fa9]: This should be a separate, controlled facility. We don't want DPEs or FRs to upload.","title":"Package Uploader"},{"location":"req/tests/","text":"Test Requirements this document defines each test in Requirements See Digitization standards Folder Structure and bdrc-audit prototype to do list The test subject is a set of files in a path. The audit user inputs test parameters. Each test may have its own set of parameters. For most tests, the required input is the container of a project . This structure is named the Standard Project Structure The container is a folder which contains: - a Bibliographic Info Sheet in Excel format - a directory named \"archive\" which contains subfolders (no naming convention) - a directory named \"images\" which contains subfolders (no naming convention) Audit number of files per folder Test Parameters Path to a folder containing a Standard Project Structure Success criteria: Passes only when: * every subfolder contains only files whose file name ends with a number. * The numbers in the file name endings form a series 1..n where n is the number of files in the folder. * Numbers may contain leading zeroes. It is not required that each file contain the same format. For example, W42_I4242_0001.jpg W42_I4242_2.jpg is a valid sequence for a two file folder. File Type Test parameters Path to a folder containing a Standard Project Structure a designation of the folder containing the archival master (default name: archive ) a designation of the folder containing the web images (default name: images ) Success criteria: Passes only when: * the archive files contain only images which match these requirements: Feature Standard File format JPEG 2000 (.j2k), wavelets compression, highest data size Resolution 600 ppi/dpi Color profile RGB, 24-bits Pixel dimensions consistent width ~~Quality~~ ~~1 page per image, no borders, no scan lines, no artifacts~~ The Quality aspect cannot be determined by programmatic inspection, so it is not a requirement in the audit phase. the web images folder files have the following properties: Feature Standard File Format JPEG (.jpg) for color pages, TIFF G4 compression (.tif) for text only pages Resolution consistent ppi/dpi Color Profile RGB 24-bits for JPEG, BW 1-bit for TIFF Pixel dimensions consistent width File size smaller than 400 KB Canonical paths Test Parameters Path to a folder containing a Standard Project Structure Work Name: an unformatted text string Volume names: a list of unformatted text strings, representing the volumes in the work. Note this document does not specify formats for work and volume names. Success Criteria This test passes when: the last element of the project folder is the work name. The project folder contains one folder for each given volume. Audit Biblio-sheets Needs more detail","title":"Test Requirements"},{"location":"req/tests/#test-requirements","text":"this document defines each test in Requirements See Digitization standards Folder Structure and bdrc-audit prototype to do list The test subject is a set of files in a path. The audit user inputs test parameters. Each test may have its own set of parameters. For most tests, the required input is the container of a project . This structure is named the Standard Project Structure The container is a folder which contains: - a Bibliographic Info Sheet in Excel format - a directory named \"archive\" which contains subfolders (no naming convention) - a directory named \"images\" which contains subfolders (no naming convention)","title":"Test Requirements"},{"location":"req/tests/#audit-number-of-files-per-folder","text":"","title":"Audit number of files per folder"},{"location":"req/tests/#test-parameters","text":"Path to a folder containing a Standard Project Structure","title":"Test Parameters"},{"location":"req/tests/#success-criteria","text":"Passes only when: * every subfolder contains only files whose file name ends with a number. * The numbers in the file name endings form a series 1..n where n is the number of files in the folder. * Numbers may contain leading zeroes. It is not required that each file contain the same format. For example, W42_I4242_0001.jpg W42_I4242_2.jpg is a valid sequence for a two file folder.","title":"Success criteria:"},{"location":"req/tests/#file-type","text":"","title":"File Type"},{"location":"req/tests/#test-parameters_1","text":"Path to a folder containing a Standard Project Structure a designation of the folder containing the archival master (default name: archive ) a designation of the folder containing the web images (default name: images )","title":"Test parameters"},{"location":"req/tests/#success-criteria_1","text":"Passes only when: * the archive files contain only images which match these requirements: Feature Standard File format JPEG 2000 (.j2k), wavelets compression, highest data size Resolution 600 ppi/dpi Color profile RGB, 24-bits Pixel dimensions consistent width ~~Quality~~ ~~1 page per image, no borders, no scan lines, no artifacts~~ The Quality aspect cannot be determined by programmatic inspection, so it is not a requirement in the audit phase. the web images folder files have the following properties: Feature Standard File Format JPEG (.jpg) for color pages, TIFF G4 compression (.tif) for text only pages Resolution consistent ppi/dpi Color Profile RGB 24-bits for JPEG, BW 1-bit for TIFF Pixel dimensions consistent width File size smaller than 400 KB","title":"Success criteria:"},{"location":"req/tests/#canonical-paths","text":"","title":"Canonical paths"},{"location":"req/tests/#test-parameters_2","text":"Path to a folder containing a Standard Project Structure Work Name: an unformatted text string Volume names: a list of unformatted text strings, representing the volumes in the work. Note this document does not specify formats for work and volume names.","title":"Test Parameters"},{"location":"req/tests/#success-criteria_2","text":"This test passes when: the last element of the project folder is the work name. The project folder contains one folder for each given volume.","title":"Success Criteria"},{"location":"req/tests/#audit-biblio-sheets","text":"Needs more detail","title":"Audit Biblio-sheets"},{"location":"resources/about/","text":"Building this document This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"Building this document"},{"location":"resources/about/#building-this-document","text":"This website was built under the following environment: - Python 3.7.1 - mkdocs 1.0.4 - mkdocs-cinder 0.1.4 - - Asset Manager Git hub project pages update from gh-pages option is selected, because we use an outside theme, not a GH Jekyll theme. The mkdocs-windmill theme was considered, but it doesn't work with mkdocs 1.0 mkdocs-windmill Issue #30 The documents are largely edited in Atom , because of its awesome image capturing capability, and its generally better Makrdown preview than pyCharm (where most of the Python development is being done.)","title":"Building this document"},{"location":"resources/resources/","text":"Resources Source https://github.com/buda-base/asset-manager Trello Project Management These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org Audit Tool Asset Manager Other Images Other Documents Notes from 2018-9-07 Core Requirements docs These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"Resources"},{"location":"resources/resources/#resources","text":"","title":"Resources"},{"location":"resources/resources/#source","text":"https://github.com/buda-base/asset-manager","title":"Source"},{"location":"resources/resources/#trello-project-management","text":"These resources are available only to the BDRC Team and selected observers. if you require access, please request to jimk AT tbrc DOT org","title":"Trello Project Management"},{"location":"resources/resources/#audit-tool","text":"","title":"Audit Tool"},{"location":"resources/resources/#asset-manager","text":"","title":"Asset Manager"},{"location":"resources/resources/#other-images","text":"","title":"Other Images"},{"location":"resources/resources/#other-documents","text":"Notes from 2018-9-07","title":"Other Documents"},{"location":"resources/resources/#core-requirements-docs","text":"These documents are maintained in a shared Google Drive Folder, Asset Manager Asset Manager v.01 Core Requirements Asset Manager v-1.0 Asset Manager Notes Clearest statement of workflow.","title":"Core Requirements docs"},{"location":"user/AuditTool/AuditToolOperation-0.9/","text":"Audit Tool 0.9 Operation Installation and Configuration Please refer to Installation for details of installation. Please see the section Operation On Windows machines, the script type .sh is replaced with PowerShell scripts, which have the suffix .ps1 Starting Start the audit tool with the audittool.sh script. The configuration step above should have initialized locations of the software which audittool.sh needs. The arguments to audit tool are simply: usage: AuditTest [options] { - | Directory,Directory,Directory} where: - read folders from standard input (not supported on PowerShell) Directory .... is a list of directories separated by whitespace. [options] are: -d,--debug Show debugging information -i,--inputFile <arg> Input file, one path per line -l,--log_home <arg> Test Result log directory. Must be writable. Default is <UserHome>/audit-test-logs/. Created if not exists. Other logs are still written to default log home The -d switch has no functionality as of release 0.9 Exit status Release V09. Rel 4 (6 Nov 2020) adds 'WARNING' semantics to test outcomes. Several tests require the existence of well-known directory names which contain image groups. You can set these names in the shell.properties files on a site-by-site basis. With this release, if those directories aren't found, the test will hold the \"Not run\" outcome, and the logs will log the tests results as a WARN, instead of an Error. The overall result of a batch of tests has new semantics as well. Formerly, a test run passed only if all tests passed. A WARNING result would have been determined to be the same as an ERROR. In this release, the overall run result is calculated: - PASS only if every test passed - WARN if some tests passed and some tests had WARN status - FAIL if any test failed. This result is captured in the output file name of the run result: {PASS|WARN|FAIL}-WorkRID={date}.csv However, the return code of the audittool program is still - 0 if no tests failed (some may have passed, some may have warned) - 1 if any test failed Using input files The Java runtime in audit tool expects to find its input files (the -i flag, and the - flag) and arguments in the UTF-8 encoding. This is native on most of audit tool's supported platforms. Using redirection (the > or | operators)on Microsoft Windows Powershell may not create files with the correct encoding. Powershell's pipe operator doesn't behave like Linux, so piping a output of a file to audit tool may not behave as expected. Correcting the encoding is outside of the scope of this document. For best results, do all pipe and file manipulation inside the cmd environment, or upgrade to PowerShell 6. Outputs Run logs and work logs Audit tool creates two sets of logs: - Run logs, which capture one invocation of Audit tool. These are in \\<User home> /audit-tool-logs/. Two sets, csv, and log files are generated. \\<User home> is the interactive user's home directory. - Per Work logs. One .CSV file is created for each work audittool scans. A \"work\" in this context means a top level directory. It is not connected to any existing BDRC library. These are located in either the Run log home (above) or in the directory specified in the -l | --log_home argument. Note to windows users: You can change the default log home in the log4j2.properties file in the installer. That file contains a proposed Windows location. Per work logs File name Each work which is analyzed has its output written to a file WorkName.YYYY-MM-DD-HH-MM .csv in the work log location (se above.) YYYY-MM-DD-HH-MM of course, stands for the run date and time. Optionally, the user can indicate the pass or fail status of each work's test by setting properties in the installation's log4j2.propertes file. This shows the properties: property.passPrefix=PASS- property.failPrefix=FAIL- property.warnPrefix=WARN- Any unicode text is allowed, but please bear in mind that support staff might not have the fonts installed on their machines. Work log contents The work log file contains the results for each test in sequence. Tests which are ordinarily found in the detail logs are added after the overall test result. The work run log contains a blend of the summary and the detail loggers below, in csv format. A sample work log is: id test_name outcome error_number error_test detail_path W1KG13765 No Files in Root Folder Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 Web Image Attributes Failed /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510049.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510061.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510075.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510101.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 No folders allowed in Image Group folders Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 File Sequence Test Failed /Users/dev/tmp/pub/00/W1KG13765 106 Folder /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951 fails sequence test. /Users/dev/tmp/pub/00/W1KG13765 105 Sequence File dimensions does not end in an integer: ends with not found /Users/dev/tmp/pub/00/W1KG13765 Run logs Audit Tool log outputs are in subdirectories of audit-tool-logs of the user's home directory. You can change the base folder in two ways: - edit in the Audit tool's log4j2.properties entry property.logRoot entry. - use the -l | --log_home argument in the call to audittool.sh You can configure other logging properties in the log4j2.properties file. NOTE: log4j2 is significantly different from the original log4j. Under audit-tool-logs are folders containing csv and log Log Contents Log Level File name Details Summary AuditTestShell-SUMMARY-date&Time.log Audit Tool writes a summary of each test to the console, and to a summary log file. The summary log file shows the pass/fail status of each test on each given directory. Detail AuditTestShell-DETAIL-date&Time.log A detailed log file, shows each file which failed a specific test. Internal AuditTestShell-TestInt-date&time.log the shell passes in this log4j logger for test internal logging. The detail files contain the summary result. If there were failures, each item which failed is separately listed (see below) CSV CSV files are output for easier analysis and collection. They follow the log files' naming conventions. Summary and detail log files have different data formats. The summary file contains: outcome path test_name Passed \\\\TBRCRS3\\Archive\\W1KG10190 No Files in Root Folder The detail file contains: error_number error_test path 104 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 fails files only test. \\\\TBRCRS3\\Archive\\W1KG10190 103 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 contains directory S0001491.JOB-A \\\\TBRCRS3\\Archive\\W1KG10190 Note that the path which failed the test is given as a separate data element: there is no obligation that the error message contain the path, and separating the path allows for easier data access. Principles of operation Audit tool's initial release runs every test in the test library tests against a complete work. There is no provision yet for running a test against a single image group or subdirectory of a work. Property file shell.properties Audit tool reads several variables from its property file shell.properties which is found in the same subdirectory as the shell jar file. These properties locate the tests and define parameters which the tests need, such as the folder names of parents of image groups. log4j2.properties Values relating to logging and output appear here. You can configure the parent folder of log files, their formats and file names. Overriding properties As a user, you can override shell.properties properties by creating a file $HOME/.config/bdrc/auditTool/user.properties As a system administrator, you can override any property (even user properties) by defining them in the VM options section of the audittool.sh ( audittool.ps1 on Windows command line). In this example, we're overriding the MaximumImageFileSize property to a value slightly smaller than the default. java -DMaximumImageFileSize=300K -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ Note the evaluation is one-pass. You cannot override the default user.properties file on the command line. This will not cause the values of 'other_config.properties' to be read in. Command line properties are always read last. java -DUserConfigPath=wont.be.read.properties -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ Detailed examples are given in Appendix I. Test Requirements The test requirements and functions are outside of the scope of this document. A draft requirements document of the tests can be found at Audit Tool Test Requirements Operation The Audit Tool shell jar (which audittool.sh passes as the main jar file to java) can either run an internal set of tests, or can use an external jar file. It runs all the tests in the library against all the directories given in the arguments. Please refer to Using an external library for instructions on how to use an external test library. Test output The tests themselves do not output results. The test framework allows the shell to iterate over the results and act on them. Initially, these are sent to log files, but we could send them to a database without changing any code, by reconfiguring the logging to send to a database. You can toggle on and off logging by changing comment status as described in the log4j2.properties file. Test Internal logging To trace tests' internal logs, each test gets passed in an internal logger whose name is its class name. The logger which handles these are in the log4j2.properties file in the section logger.testLogger.name=io.bdrc.am.audit.audittests To reduce output, this logger's appender is set to null, as shown here: # --------------------- Test Internals logging --------------- appender.testInternals.name=testInternalsName # # To activate internal test logging, uncomment this line, and comment out # the remaining testInternals lines appender.testInternals.type=Null # To activate internal test logging, comment the previous line, and uncomment the next stanza # appender.testInternals.type=File # appender.testInternals.append=false # appender.testInternals.fileName=${logPrefix}-${TestInt}-${date:yyyy-MM-dd-HH-mm-ss}.log # appender.testInternals.layoutString.type = PatternLayout # appender.testInternals.layoutString.pattern=%d{yyyy-MM-dd HH.mm.ss} %-5p %m :%C:%n # # --------------------- end Test Internals logging ---------------- Using an external test library Audit tool contains an internal library which contains various tests. To run a different library, you need to define two JVM options with the -D flag: - testJar: Path to the Jar file which contains the tests - testDictionaryClassName: the fully qualified variable name of a public class in the testJar which implements io.bdrc.audit.ITestDictionary Example: java -DtestJar=/usr/local/bin/at09/audit-test-lib-someversion.jar -DtestDictionaryClassName=io.bdrc.am.at.audittests.TestDictionary -DatHome=${CONFIG_ATHOME} io.bdrc.am.audit.shell.shell /Volumes/Archive/W2KG20927 Test Developer's Guide This section describes how to implement and package different test libraries. The general Audit Tool User doesn't need this material. Locating the tests Test Dictionary The shell assumes that the package io.bdrc.am.audit.iaudit is either: - in the shell jar file itself - on the class path - or specified with the -DtestJar .... -DtestDictionaryClassName (see 'Using an external test library' above) Test Config objects The test dictionary has a dependency on AuditTestConfig class. Test developers include this library in their Jar, and provide Test configuration objects. The test configuration objects provide information to the shell as to a test's name, friendly description, class which implements the test (which, again, can be in any package in the library) . AuditTestConfig constructor /** * Instantiates a new Audit test config. * * @param fullName the full name * @param argNames the arg names * @param shortName the short name * @param clazz the clazz */ public AuditTestConfig(String fullName, List<String> argNames, String shortName, Class<?> clazz) To package a test you implement one of these and add it to your TestDictionary. audit-test-lib.TestDictionary() constructor shows AuditTestConfig usaqe: private final Hashtable<String, AuditTestConfig> _TestDictionary = new Hashtable<String, AuditTestConfig>() { { put(\"FileSequence\", new AuditTestConfig(\"File Sequence Test\", // This statement asserts that the caller has to provide values for these // arguments Arrays.asList( \"ArchiveImageGroupParent\", \"DerivedImageGroupParent\"), \"FileSequence\", FileSequence.class)); //noinspection ArraysAsListWithZeroOrOneArgument put(\"NoFilesInFolder\", new AuditTestConfig(\"No Files in Root Folder\", Arrays.asList(\"\"), \"NoFilesInFolder\", NoFilesInRoot.class)); put(\"NoFoldersInImageGroups\", new AuditTestConfig(\"No folders allowed in Image Group folders\", Arrays.asList(\"ArchiveImageGroupParent\", \"DerivedImageGroupParent\"),\"NoFoldersInImageGroups\", NoFoldersInImageGroups.class)); } }; Parameters The constructor takes these parameters name type description fullName String Free form text argNames List<String> List of argument names. The caller of the test provides a List of Strings which are K=V pairs. This is a poor man's implementation of Python's **kwargs shortName String Short mnemonic, for use in scripting. Should not contain spaces. Usually, this is the TestDictionary. key for which this object is the value clazz Class<?> Any class object which implements the IAuditTest interface. Running a test A full production instance is available in audit-test-shell/src/main/java/io/bdrc/am/audit/shell/shell.java Once you've acquired its AuditTestConfig object, the components of running a test are: - Instantiating its with its constructor - setting its path and keyword arguments ( IAudit.setParams() ) - calling it's LaunchTest implementation. This code fragment of audit-test-shell shows this operation Constructor<IAuditTest> ctor = testClass.getConstructor(Logger.class); IAuditTest inst = ctor.newInstance(testLogger); inst.setParams((Object[]) params); inst.LaunchTest(); tr = inst.getTestResult(); (you can implement your test classes without a Constructor requiring a logger. In this case, the test writer and the shell writer conspired together to require a logger in the constructor.) Examining test results. audit-test-interface/io/bdrc/am/audit/iaudit/TestResult and TestMessage define the objects which implement test results. The TestResult.Passed() method contains the overall outcome of the test. Test messages are retrieved by the TestResults.getErrors() method. It's a good idea to have the first error in the list name the container which failed the test, followed by all the specific failure instances for each file. The caller determines the logging disposition. Appendix I Property overriding example In this example, we test a work overriding the MaximumImageFileSize property. This example shows runs that use: - the default property - a much smaller value, defined in user.properties - an override of that smaller value defined in the shell script. Ex 1. No user.properties file, shell.properties value of 400K used. Tests pass \u276f ls -l ~/.config/bdrc/auditTool/user.properties gls: cannot access '/Users/XXX/.config/bdrc/auditTool/user.properties': No such file or directory \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 2. Using User.properties Here, the default is set to 40K, and the Image file size test fails. \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=40K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Ex 3: Raising the user properties value \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=300K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 4: Overriding user.properties with VM arguments In this example, we've defined a much smaller argument in a copy of the command file, and the test fails. \u276f grep Maximum ./use_vm_args_to_override.sh java -DMaximumImageFileSize=30K -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ \u276f ./use_vm_args_to_override.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Updates Date Notes 4 Nov 2020 Add Warning semantics. For some tests, if a required directory does not exist, the test should not fail. (For example, the ImageSizeTest test requires the folder image to exist.If it does not, the test cannot be said to fail, since it was never run. Cases where this occurs generate a test result of WARN. Files which would have been renamed PASS or FAIL are now renamed WARN--... in the case when some tests succeeded and some had warnings. The return code of audittool also accommodates this extension. If any test failed outright, the return code from audittool is 1. If all tests succeeded, or some tests succeeded, while some generated warnings, audittool returns 0 (as if all tests succeeded) 2021-05-14 Add overrides of properties","title":"Operation"},{"location":"user/AuditTool/AuditToolOperation-0.9/#audit-tool-09-operation","text":"","title":"Audit Tool 0.9 Operation"},{"location":"user/AuditTool/AuditToolOperation-0.9/#installation-and-configuration","text":"Please refer to Installation for details of installation. Please see the section","title":"Installation and Configuration"},{"location":"user/AuditTool/AuditToolOperation-0.9/#operation","text":"On Windows machines, the script type .sh is replaced with PowerShell scripts, which have the suffix .ps1","title":"Operation"},{"location":"user/AuditTool/AuditToolOperation-0.9/#starting","text":"Start the audit tool with the audittool.sh script. The configuration step above should have initialized locations of the software which audittool.sh needs. The arguments to audit tool are simply: usage: AuditTest [options] { - | Directory,Directory,Directory} where: - read folders from standard input (not supported on PowerShell) Directory .... is a list of directories separated by whitespace. [options] are: -d,--debug Show debugging information -i,--inputFile <arg> Input file, one path per line -l,--log_home <arg> Test Result log directory. Must be writable. Default is <UserHome>/audit-test-logs/. Created if not exists. Other logs are still written to default log home The -d switch has no functionality as of release 0.9","title":"Starting"},{"location":"user/AuditTool/AuditToolOperation-0.9/#exit-status","text":"Release V09. Rel 4 (6 Nov 2020) adds 'WARNING' semantics to test outcomes. Several tests require the existence of well-known directory names which contain image groups. You can set these names in the shell.properties files on a site-by-site basis. With this release, if those directories aren't found, the test will hold the \"Not run\" outcome, and the logs will log the tests results as a WARN, instead of an Error. The overall result of a batch of tests has new semantics as well. Formerly, a test run passed only if all tests passed. A WARNING result would have been determined to be the same as an ERROR. In this release, the overall run result is calculated: - PASS only if every test passed - WARN if some tests passed and some tests had WARN status - FAIL if any test failed. This result is captured in the output file name of the run result: {PASS|WARN|FAIL}-WorkRID={date}.csv However, the return code of the audittool program is still - 0 if no tests failed (some may have passed, some may have warned) - 1 if any test failed","title":"Exit status"},{"location":"user/AuditTool/AuditToolOperation-0.9/#using-input-files","text":"The Java runtime in audit tool expects to find its input files (the -i flag, and the - flag) and arguments in the UTF-8 encoding. This is native on most of audit tool's supported platforms. Using redirection (the > or | operators)on Microsoft Windows Powershell may not create files with the correct encoding. Powershell's pipe operator doesn't behave like Linux, so piping a output of a file to audit tool may not behave as expected. Correcting the encoding is outside of the scope of this document. For best results, do all pipe and file manipulation inside the cmd environment, or upgrade to PowerShell 6.","title":"Using input files"},{"location":"user/AuditTool/AuditToolOperation-0.9/#outputs","text":"","title":"Outputs"},{"location":"user/AuditTool/AuditToolOperation-0.9/#run-logs-and-work-logs","text":"Audit tool creates two sets of logs: - Run logs, which capture one invocation of Audit tool. These are in \\<User home> /audit-tool-logs/. Two sets, csv, and log files are generated. \\<User home> is the interactive user's home directory. - Per Work logs. One .CSV file is created for each work audittool scans. A \"work\" in this context means a top level directory. It is not connected to any existing BDRC library. These are located in either the Run log home (above) or in the directory specified in the -l | --log_home argument. Note to windows users: You can change the default log home in the log4j2.properties file in the installer. That file contains a proposed Windows location.","title":"Run logs and work logs"},{"location":"user/AuditTool/AuditToolOperation-0.9/#per-work-logs","text":"","title":"Per work logs"},{"location":"user/AuditTool/AuditToolOperation-0.9/#file-name","text":"Each work which is analyzed has its output written to a file WorkName.YYYY-MM-DD-HH-MM .csv in the work log location (se above.) YYYY-MM-DD-HH-MM of course, stands for the run date and time. Optionally, the user can indicate the pass or fail status of each work's test by setting properties in the installation's log4j2.propertes file. This shows the properties: property.passPrefix=PASS- property.failPrefix=FAIL- property.warnPrefix=WARN- Any unicode text is allowed, but please bear in mind that support staff might not have the fonts installed on their machines.","title":"File name"},{"location":"user/AuditTool/AuditToolOperation-0.9/#work-log-contents","text":"The work log file contains the results for each test in sequence. Tests which are ordinarily found in the detail logs are added after the overall test result. The work run log contains a blend of the summary and the detail loggers below, in csv format. A sample work log is: id test_name outcome error_number error_test detail_path W1KG13765 No Files in Root Folder Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 Web Image Attributes Failed /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510049.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510061.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510075.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510101.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 No folders allowed in Image Group folders Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 File Sequence Test Failed /Users/dev/tmp/pub/00/W1KG13765 106 Folder /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951 fails sequence test. /Users/dev/tmp/pub/00/W1KG13765 105 Sequence File dimensions does not end in an integer: ends with not found /Users/dev/tmp/pub/00/W1KG13765","title":"Work log contents"},{"location":"user/AuditTool/AuditToolOperation-0.9/#run-logs","text":"Audit Tool log outputs are in subdirectories of audit-tool-logs of the user's home directory. You can change the base folder in two ways: - edit in the Audit tool's log4j2.properties entry property.logRoot entry. - use the -l | --log_home argument in the call to audittool.sh You can configure other logging properties in the log4j2.properties file. NOTE: log4j2 is significantly different from the original log4j. Under audit-tool-logs are folders containing csv and log","title":"Run logs"},{"location":"user/AuditTool/AuditToolOperation-0.9/#log-contents","text":"","title":"Log Contents"},{"location":"user/AuditTool/AuditToolOperation-0.9/#log","text":"Level File name Details Summary AuditTestShell-SUMMARY-date&Time.log Audit Tool writes a summary of each test to the console, and to a summary log file. The summary log file shows the pass/fail status of each test on each given directory. Detail AuditTestShell-DETAIL-date&Time.log A detailed log file, shows each file which failed a specific test. Internal AuditTestShell-TestInt-date&time.log the shell passes in this log4j logger for test internal logging. The detail files contain the summary result. If there were failures, each item which failed is separately listed (see below)","title":"Log"},{"location":"user/AuditTool/AuditToolOperation-0.9/#csv","text":"CSV files are output for easier analysis and collection. They follow the log files' naming conventions. Summary and detail log files have different data formats. The summary file contains: outcome path test_name Passed \\\\TBRCRS3\\Archive\\W1KG10190 No Files in Root Folder The detail file contains: error_number error_test path 104 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 fails files only test. \\\\TBRCRS3\\Archive\\W1KG10190 103 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 contains directory S0001491.JOB-A \\\\TBRCRS3\\Archive\\W1KG10190 Note that the path which failed the test is given as a separate data element: there is no obligation that the error message contain the path, and separating the path allows for easier data access.","title":"CSV"},{"location":"user/AuditTool/AuditToolOperation-0.9/#principles-of-operation","text":"Audit tool's initial release runs every test in the test library tests against a complete work. There is no provision yet for running a test against a single image group or subdirectory of a work.","title":"Principles of operation"},{"location":"user/AuditTool/AuditToolOperation-0.9/#property-file","text":"shell.properties Audit tool reads several variables from its property file shell.properties which is found in the same subdirectory as the shell jar file. These properties locate the tests and define parameters which the tests need, such as the folder names of parents of image groups. log4j2.properties Values relating to logging and output appear here. You can configure the parent folder of log files, their formats and file names.","title":"Property file"},{"location":"user/AuditTool/AuditToolOperation-0.9/#overriding-properties","text":"As a user, you can override shell.properties properties by creating a file $HOME/.config/bdrc/auditTool/user.properties As a system administrator, you can override any property (even user properties) by defining them in the VM options section of the audittool.sh ( audittool.ps1 on Windows command line). In this example, we're overriding the MaximumImageFileSize property to a value slightly smaller than the default. java -DMaximumImageFileSize=300K -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ Note the evaluation is one-pass. You cannot override the default user.properties file on the command line. This will not cause the values of 'other_config.properties' to be read in. Command line properties are always read last. java -DUserConfigPath=wont.be.read.properties -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ Detailed examples are given in Appendix I.","title":"Overriding properties"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-requirements","text":"The test requirements and functions are outside of the scope of this document. A draft requirements document of the tests can be found at Audit Tool Test Requirements","title":"Test Requirements"},{"location":"user/AuditTool/AuditToolOperation-0.9/#operation_1","text":"The Audit Tool shell jar (which audittool.sh passes as the main jar file to java) can either run an internal set of tests, or can use an external jar file. It runs all the tests in the library against all the directories given in the arguments. Please refer to Using an external library for instructions on how to use an external test library.","title":"Operation"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-output","text":"The tests themselves do not output results. The test framework allows the shell to iterate over the results and act on them. Initially, these are sent to log files, but we could send them to a database without changing any code, by reconfiguring the logging to send to a database. You can toggle on and off logging by changing comment status as described in the log4j2.properties file.","title":"Test output"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-internal-logging","text":"To trace tests' internal logs, each test gets passed in an internal logger whose name is its class name. The logger which handles these are in the log4j2.properties file in the section logger.testLogger.name=io.bdrc.am.audit.audittests To reduce output, this logger's appender is set to null, as shown here: # --------------------- Test Internals logging --------------- appender.testInternals.name=testInternalsName # # To activate internal test logging, uncomment this line, and comment out # the remaining testInternals lines appender.testInternals.type=Null # To activate internal test logging, comment the previous line, and uncomment the next stanza # appender.testInternals.type=File # appender.testInternals.append=false # appender.testInternals.fileName=${logPrefix}-${TestInt}-${date:yyyy-MM-dd-HH-mm-ss}.log # appender.testInternals.layoutString.type = PatternLayout # appender.testInternals.layoutString.pattern=%d{yyyy-MM-dd HH.mm.ss} %-5p %m :%C:%n # # --------------------- end Test Internals logging ----------------","title":"Test Internal logging"},{"location":"user/AuditTool/AuditToolOperation-0.9/#using-an-external-test-library","text":"Audit tool contains an internal library which contains various tests. To run a different library, you need to define two JVM options with the -D flag: - testJar: Path to the Jar file which contains the tests - testDictionaryClassName: the fully qualified variable name of a public class in the testJar which implements io.bdrc.audit.ITestDictionary Example: java -DtestJar=/usr/local/bin/at09/audit-test-lib-someversion.jar -DtestDictionaryClassName=io.bdrc.am.at.audittests.TestDictionary -DatHome=${CONFIG_ATHOME} io.bdrc.am.audit.shell.shell /Volumes/Archive/W2KG20927","title":"Using an external test library"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-developers-guide","text":"This section describes how to implement and package different test libraries. The general Audit Tool User doesn't need this material.","title":"Test Developer's Guide"},{"location":"user/AuditTool/AuditToolOperation-0.9/#locating-the-tests","text":"","title":"Locating the tests"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-dictionary","text":"The shell assumes that the package io.bdrc.am.audit.iaudit is either: - in the shell jar file itself - on the class path - or specified with the -DtestJar .... -DtestDictionaryClassName (see 'Using an external test library' above)","title":"Test Dictionary"},{"location":"user/AuditTool/AuditToolOperation-0.9/#test-config-objects","text":"The test dictionary has a dependency on AuditTestConfig class. Test developers include this library in their Jar, and provide Test configuration objects. The test configuration objects provide information to the shell as to a test's name, friendly description, class which implements the test (which, again, can be in any package in the library) .","title":"Test Config objects"},{"location":"user/AuditTool/AuditToolOperation-0.9/#audittestconfig-constructor","text":"/** * Instantiates a new Audit test config. * * @param fullName the full name * @param argNames the arg names * @param shortName the short name * @param clazz the clazz */ public AuditTestConfig(String fullName, List<String> argNames, String shortName, Class<?> clazz) To package a test you implement one of these and add it to your TestDictionary. audit-test-lib.TestDictionary() constructor shows AuditTestConfig usaqe: private final Hashtable<String, AuditTestConfig> _TestDictionary = new Hashtable<String, AuditTestConfig>() { { put(\"FileSequence\", new AuditTestConfig(\"File Sequence Test\", // This statement asserts that the caller has to provide values for these // arguments Arrays.asList( \"ArchiveImageGroupParent\", \"DerivedImageGroupParent\"), \"FileSequence\", FileSequence.class)); //noinspection ArraysAsListWithZeroOrOneArgument put(\"NoFilesInFolder\", new AuditTestConfig(\"No Files in Root Folder\", Arrays.asList(\"\"), \"NoFilesInFolder\", NoFilesInRoot.class)); put(\"NoFoldersInImageGroups\", new AuditTestConfig(\"No folders allowed in Image Group folders\", Arrays.asList(\"ArchiveImageGroupParent\", \"DerivedImageGroupParent\"),\"NoFoldersInImageGroups\", NoFoldersInImageGroups.class)); } };","title":"AuditTestConfig constructor"},{"location":"user/AuditTool/AuditToolOperation-0.9/#parameters","text":"The constructor takes these parameters name type description fullName String Free form text argNames List<String> List of argument names. The caller of the test provides a List of Strings which are K=V pairs. This is a poor man's implementation of Python's **kwargs shortName String Short mnemonic, for use in scripting. Should not contain spaces. Usually, this is the TestDictionary. key for which this object is the value clazz Class<?> Any class object which implements the IAuditTest interface.","title":"Parameters"},{"location":"user/AuditTool/AuditToolOperation-0.9/#running-a-test","text":"A full production instance is available in audit-test-shell/src/main/java/io/bdrc/am/audit/shell/shell.java Once you've acquired its AuditTestConfig object, the components of running a test are: - Instantiating its with its constructor - setting its path and keyword arguments ( IAudit.setParams() ) - calling it's LaunchTest implementation. This code fragment of audit-test-shell shows this operation Constructor<IAuditTest> ctor = testClass.getConstructor(Logger.class); IAuditTest inst = ctor.newInstance(testLogger); inst.setParams((Object[]) params); inst.LaunchTest(); tr = inst.getTestResult(); (you can implement your test classes without a Constructor requiring a logger. In this case, the test writer and the shell writer conspired together to require a logger in the constructor.)","title":"Running a test"},{"location":"user/AuditTool/AuditToolOperation-0.9/#examining-test-results","text":"audit-test-interface/io/bdrc/am/audit/iaudit/TestResult and TestMessage define the objects which implement test results. The TestResult.Passed() method contains the overall outcome of the test. Test messages are retrieved by the TestResults.getErrors() method. It's a good idea to have the first error in the list name the container which failed the test, followed by all the specific failure instances for each file. The caller determines the logging disposition.","title":"Examining test results."},{"location":"user/AuditTool/AuditToolOperation-0.9/#appendix-i","text":"","title":"Appendix I"},{"location":"user/AuditTool/AuditToolOperation-0.9/#property-overriding-example","text":"In this example, we test a work overriding the MaximumImageFileSize property. This example shows runs that use: - the default property - a much smaller value, defined in user.properties - an override of that smaller value defined in the shell script. Ex 1. No user.properties file, shell.properties value of 400K used. Tests pass \u276f ls -l ~/.config/bdrc/auditTool/user.properties gls: cannot access '/Users/XXX/.config/bdrc/auditTool/user.properties': No such file or directory \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 2. Using User.properties Here, the default is set to 40K, and the Image file size test fails. \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=40K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Ex 3: Raising the user properties value \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=300K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 4: Overriding user.properties with VM arguments In this example, we've defined a much smaller argument in a copy of the command file, and the test fails. \u276f grep Maximum ./use_vm_args_to_override.sh java -DMaximumImageFileSize=30K -DatHome=${CONFIG_ATHOME} -Dlog4j.configurationFile=${LOG_PROPS} -jar ${shellJar} $@ \u276f ./use_vm_args_to_override.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs","title":"Property overriding example"},{"location":"user/AuditTool/AuditToolOperation-0.9/#updates","text":"Date Notes 4 Nov 2020 Add Warning semantics. For some tests, if a required directory does not exist, the test should not fail. (For example, the ImageSizeTest test requires the folder image to exist.If it does not, the test cannot be said to fail, since it was never run. Cases where this occurs generate a test result of WARN. Files which would have been renamed PASS or FAIL are now renamed WARN--... in the case when some tests succeeded and some had warnings. The return code of audittool also accommodates this extension. If any test failed outright, the return code from audittool is 1. If all tests succeeded, or some tests succeeded, while some generated warnings, audittool returns 0 (as if all tests succeeded) 2021-05-14 Add overrides of properties","title":"Updates"},{"location":"user/AuditTool/AuditToolOperation-1.0/","text":"Audit Tool 1.0 Operation Installation and Configuration Please refer to Installation for details of installation. Operation Starting If audit-tool is not on your path, add its installation directory (this example is for MacOS running zsh ) export path=(/Applications/audit-tool.app/Contents/MacOS $path) Please refer to 'Setting Path' in Installation Running: \u276f audit-tool usage: audit-tool [options] { - | Directory,Directory,Directory} where: - read folders from standard input Directory .... is a list of directories separated by whitespace [options] are: -d,--debug Show debugging information -i,--inputFile <arg> Input file, one path per line -l,--log_home <arg> Test Result log directory. Must be writable. Default is <UserHome>/audit-test-logs/. Created if not exists The -d switch has no functionality as of release 1.0 Exit status Release V09. Rel 4 (6 Nov 2020) adds 'WARNING' semantics to test outcomes. Several tests require the existence of well-known directory names which contain image groups. You can set these names in the shell.properties files on a site-by-site basis. With this release, if those directories aren't found, the test will hold the \"Not run\" outcome, and the logs will log the tests results as a WARN, instead of an Error. The overall result of a batch of tests has new semantics as well. Formerly, a test run passed only if all tests passed. A WARNING result would have been determined to be the same as an ERROR. In this release, the overall run result is calculated: - PASS only if every test passed - WARN if some tests passed and some tests had WARN status - FAIL if any test failed. This result is captured in the output file name of the run result: {PASS|WARN|FAIL}-WorkRID={date}.csv However, the return code of the audittool program is still - 0 if no tests failed (some may have passed, some may have warned) - 1 if any test failed Using input files The Java runtime in audit tool expects to find its input files (the -i flag, and the - flag) and arguments in the UTF-8 encoding. This is native on most of audit tool's supported platforms. Using redirection (the > or | operators)on Microsoft Windows Powershell may not create files with the correct encoding. Powershell's pipe operator doesn't behave like Linux, so piping a output of a file to audit tool may not behave as expected. Correcting the encoding is outside of the scope of this document. For best results, do all pipe and file manipulation inside the cmd environment, or upgrade to PowerShell 6. Outputs Run logs and work logs Audit tool creates two sets of logs: - Run logs, which capture one invocation of Audit tool. These are in \\<User home> /audit-tool-logs/. Two sets, csv, and log files are generated. \\<User home> is the interactive user's home directory. - Per Work logs. One .CSV file is created for each work audittool scans. A \"work\" in this context means a top level directory. It is not connected to any existing BDRC library. These are located in either the Run log home (above) or in the directory specified in the -l | --log_home argument. Note to windows users: You can change the default log home in the log4j2.properties file in the installer. That file contains a proposed Windows location. Per work logs File name Each work which is analyzed has its output written to a file WorkName.YYYY-MM-DD-HH-MM .csv in the work log location (se above.) YYYY-MM-DD-HH-MM of course, stands for the run date and time. Optionally, the user can indicate the pass or fail status of each work's test by setting properties in the installation's log4j2.propertes file. This shows the properties: property.passPrefix=PASS- property.failPrefix=FAIL- property.warnPrefix=WARN- Any unicode text is allowed, but please bear in mind that support staff might not have the fonts installed on their machines. Work log contents The work log file contains the results for each test in sequence. Tests which are ordinarily found in the detail logs are added after the overall test result. The work run log contains a blend of the summary and the detail loggers below, in csv format. A sample work log is: id test_name outcome error_number error_test detail_path W1KG13765 No Files in Root Folder Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 Web Image Attributes Failed /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510049.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510061.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510075.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510101.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 No folders allowed in Image Group folders Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 File Sequence Test Failed /Users/dev/tmp/pub/00/W1KG13765 106 Folder /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951 fails sequence test. /Users/dev/tmp/pub/00/W1KG13765 105 Sequence File dimensions does not end in an integer: ends with not found /Users/dev/tmp/pub/00/W1KG13765 Run logs Audit Tool log outputs are in subdirectories of audit-tool-logs of the user's home directory. You can change the base folder in two ways: - edit in the Audit tool's log4j2.properties entry property.logRoot entry. - use the -l | --log_home argument in the call to audittool.sh You can configure other logging properties in the log4j2.properties file. NOTE: log4j2 is significantly different from the original log4j. Under audit-tool-logs are folders containing csv and log Log Contents Log Level File name Details Summary AuditTestShell-SUMMARY-date&Time.log Audit Tool writes a summary of each test to the console, and to a summary log file. The summary log file shows the pass/fail status of each test on each given directory. Detail AuditTestShell-DETAIL-date&Time.log A detailed log file, shows each file which failed a specific test. Internal AuditTestShell-TestInt-date&time.log the shell passes in this log4j logger for test internal logging. The detail files contain the summary result. If there were failures, each item which failed is separately listed (see below) CSV CSV files are output for easier analysis and collection. They follow the log files' naming conventions. Summary and detail log files have different data formats. The summary file contains: outcome path test_name Passed \\\\TBRCRS3\\Archive\\W1KG10190 No Files in Root Folder The detail file contains: error_number error_test path 104 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 fails files only test. \\\\TBRCRS3\\Archive\\W1KG10190 103 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 contains directory S0001491.JOB-A \\\\TBRCRS3\\Archive\\W1KG10190 Note that the path which failed the test is given as a separate data element: there is no obligation that the error message contain the path, and separating the path allows for easier data access. Principles of operation Audit tool's initial release runs every test in the test library tests against a complete work. There is no provision yet for running a test against a single image group or subdirectory of a work. Property file shell.properties Audit tool reads several variables from its property file shell.properties which is found in the same subdirectory as the shell jar file. These properties locate the tests and define parameters which the tests need, such as the folder names of parents of image groups. log4j2.properties Values relating to logging and output appear here. You can configure the parent folder of log files, their formats and file names. Overriding properties As a user, you can override shell.properties properties by creating a file $HOME/.config/bdrc/auditTool/user.properties where $HOME stands for your login directory. As a system administrator, you can override any property (even overriding user properties!) by defining them in the [JavaOptions] options section of INSTALL_DIR/app/audit-tool.cfg file. (where INSTALL_DIR is the location where the system installed Audit tool ) See Audit Tool Install 1.0 Guide In this example, we're overriding MaximumImageFileSize property in the to a value slightly smaller than the default. .... [JavaOptions] .... java-options=-DMaximumImageFileSize=300k ... Note the evaluation is one-pass. You cannot override the default user.properties file on the command line. This will not cause the values of 'other_config.properties' to be read in. Command line properties are always read last. Detailed examples are given in Appendix I. Test output The tests themselves do not output results. The test framework allows the shell to iterate over the results and act on them. Initially, these are sent to log files, but we could send them to a database without changing any code, by reconfiguring the logging to send to a database. You can toggle on and off logging by changing comment status as described in the log4j2.properties file. Test Internal logging To trace tests' internal logs, each test gets passed in an internal logger whose name is its class name. The logger which handles these are in the log4j2.properties file in the section logger.testLogger.name=io.bdrc.am.audit.audittests To reduce output, this logger's appender is set to null, as shown here: # --------------------- Test Internals logging --------------- appender.testInternals.name=testInternalsName # # To activate internal test logging, uncomment this line, and comment out # the remaining testInternals lines appender.testInternals.type=Null # To activate internal test logging, comment the previous line, and uncomment the next stanza # appender.testInternals.type=File # appender.testInternals.append=false # appender.testInternals.fileName=${logPrefix}-${TestInt}-${date:yyyy-MM-dd-HH-mm-ss}.log # appender.testInternals.layoutString.type = PatternLayout # appender.testInternals.layoutString.pattern=%d{yyyy-MM-dd HH.mm.ss} %-5p %m :%C:%n # # --------------------- end Test Internals logging ---------------- Appendix I Property overriding example In this example, we test a work overriding the MaximumImageFileSize property. This example shows runs that use: - the default property - a much smaller value, defined in user.properties - an override of that smaller value defined in the system parameters (for administrators only). Ex 1. No user.properties file, shell.properties value of 400K used. Tests pass \u276f ls -l ~/.config/bdrc/auditTool/user.properties gls: cannot access '/Users/XXX/.config/bdrc/auditTool/user.properties': No such file or directory \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 2. Using User.properties Here, the default is set to 40K, and the Image file size test fails. \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=40K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Ex 3: Raising the user properties value \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=300K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 4: Overriding user.properties with VM arguments In this example, we've defined a much smaller argument in INSTALL_DIR/app/audit-tool.cfg , and the test fails. \u276f grep Maximum /opt/audit-tool/app/audit-tool.cfg java-option=-DMaximumImageFileSize=30K \u276f ./use_vm_args_to_override.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Updates Date Notes 4 Nov 2020 Add Warning semantics. For some tests, if a required directory does not exist, the test should not fail. (For example, the ImageSizeTest test requires the folder image to exist. If it does not, the test cannot be said to fail, since it was never run. Cases where this occurs generate a test result of WARN. Files which would have been renamed PASS or FAIL are now renamed WARN--... in the case when some tests succeeded and some had warnings. The return code of audittool also accommodates this extension. If any test failed outright, the return code from audittool is 1. If all tests succeeded, or some tests succeeded, while some generated warnings, audittool returns 0 (as if all tests succeeded) 2021-05-14 Add overrides of properties 26 Jan 2022 Added platform install changes to configuration. Removed external test and test development - Still in 0.9 Operation","title":"Operation"},{"location":"user/AuditTool/AuditToolOperation-1.0/#audit-tool-10-operation","text":"","title":"Audit Tool 1.0 Operation"},{"location":"user/AuditTool/AuditToolOperation-1.0/#installation-and-configuration","text":"Please refer to Installation for details of installation.","title":"Installation and Configuration"},{"location":"user/AuditTool/AuditToolOperation-1.0/#operation","text":"","title":"Operation"},{"location":"user/AuditTool/AuditToolOperation-1.0/#starting","text":"If audit-tool is not on your path, add its installation directory (this example is for MacOS running zsh ) export path=(/Applications/audit-tool.app/Contents/MacOS $path) Please refer to 'Setting Path' in Installation Running: \u276f audit-tool usage: audit-tool [options] { - | Directory,Directory,Directory} where: - read folders from standard input Directory .... is a list of directories separated by whitespace [options] are: -d,--debug Show debugging information -i,--inputFile <arg> Input file, one path per line -l,--log_home <arg> Test Result log directory. Must be writable. Default is <UserHome>/audit-test-logs/. Created if not exists The -d switch has no functionality as of release 1.0","title":"Starting"},{"location":"user/AuditTool/AuditToolOperation-1.0/#exit-status","text":"Release V09. Rel 4 (6 Nov 2020) adds 'WARNING' semantics to test outcomes. Several tests require the existence of well-known directory names which contain image groups. You can set these names in the shell.properties files on a site-by-site basis. With this release, if those directories aren't found, the test will hold the \"Not run\" outcome, and the logs will log the tests results as a WARN, instead of an Error. The overall result of a batch of tests has new semantics as well. Formerly, a test run passed only if all tests passed. A WARNING result would have been determined to be the same as an ERROR. In this release, the overall run result is calculated: - PASS only if every test passed - WARN if some tests passed and some tests had WARN status - FAIL if any test failed. This result is captured in the output file name of the run result: {PASS|WARN|FAIL}-WorkRID={date}.csv However, the return code of the audittool program is still - 0 if no tests failed (some may have passed, some may have warned) - 1 if any test failed","title":"Exit status"},{"location":"user/AuditTool/AuditToolOperation-1.0/#using-input-files","text":"The Java runtime in audit tool expects to find its input files (the -i flag, and the - flag) and arguments in the UTF-8 encoding. This is native on most of audit tool's supported platforms. Using redirection (the > or | operators)on Microsoft Windows Powershell may not create files with the correct encoding. Powershell's pipe operator doesn't behave like Linux, so piping a output of a file to audit tool may not behave as expected. Correcting the encoding is outside of the scope of this document. For best results, do all pipe and file manipulation inside the cmd environment, or upgrade to PowerShell 6.","title":"Using input files"},{"location":"user/AuditTool/AuditToolOperation-1.0/#outputs","text":"","title":"Outputs"},{"location":"user/AuditTool/AuditToolOperation-1.0/#run-logs-and-work-logs","text":"Audit tool creates two sets of logs: - Run logs, which capture one invocation of Audit tool. These are in \\<User home> /audit-tool-logs/. Two sets, csv, and log files are generated. \\<User home> is the interactive user's home directory. - Per Work logs. One .CSV file is created for each work audittool scans. A \"work\" in this context means a top level directory. It is not connected to any existing BDRC library. These are located in either the Run log home (above) or in the directory specified in the -l | --log_home argument. Note to windows users: You can change the default log home in the log4j2.properties file in the installer. That file contains a proposed Windows location.","title":"Run logs and work logs"},{"location":"user/AuditTool/AuditToolOperation-1.0/#per-work-logs","text":"","title":"Per work logs"},{"location":"user/AuditTool/AuditToolOperation-1.0/#file-name","text":"Each work which is analyzed has its output written to a file WorkName.YYYY-MM-DD-HH-MM .csv in the work log location (se above.) YYYY-MM-DD-HH-MM of course, stands for the run date and time. Optionally, the user can indicate the pass or fail status of each work's test by setting properties in the installation's log4j2.propertes file. This shows the properties: property.passPrefix=PASS- property.failPrefix=FAIL- property.warnPrefix=WARN- Any unicode text is allowed, but please bear in mind that support staff might not have the fonts installed on their machines.","title":"File name"},{"location":"user/AuditTool/AuditToolOperation-1.0/#work-log-contents","text":"The work log file contains the results for each test in sequence. Tests which are ordinarily found in the detail logs are added after the overall test result. The work run log contains a blend of the summary and the detail loggers below, in csv format. A sample work log is: id test_name outcome error_number error_test detail_path W1KG13765 No Files in Root Folder Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 Web Image Attributes Failed /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510049.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510061.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510075.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 110 Image file /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951/I1KG149510101.tif has no suitable reader. /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 No folders allowed in Image Group folders Passed /Users/dev/tmp/pub/00/W1KG13765 W1KG13765 File Sequence Test Failed /Users/dev/tmp/pub/00/W1KG13765 106 Folder /Users/dev/tmp/pub/00/W1KG13765/images/W1KG13765-I1KG14951 fails sequence test. /Users/dev/tmp/pub/00/W1KG13765 105 Sequence File dimensions does not end in an integer: ends with not found /Users/dev/tmp/pub/00/W1KG13765","title":"Work log contents"},{"location":"user/AuditTool/AuditToolOperation-1.0/#run-logs","text":"Audit Tool log outputs are in subdirectories of audit-tool-logs of the user's home directory. You can change the base folder in two ways: - edit in the Audit tool's log4j2.properties entry property.logRoot entry. - use the -l | --log_home argument in the call to audittool.sh You can configure other logging properties in the log4j2.properties file. NOTE: log4j2 is significantly different from the original log4j. Under audit-tool-logs are folders containing csv and log","title":"Run logs"},{"location":"user/AuditTool/AuditToolOperation-1.0/#log-contents","text":"","title":"Log Contents"},{"location":"user/AuditTool/AuditToolOperation-1.0/#log","text":"Level File name Details Summary AuditTestShell-SUMMARY-date&Time.log Audit Tool writes a summary of each test to the console, and to a summary log file. The summary log file shows the pass/fail status of each test on each given directory. Detail AuditTestShell-DETAIL-date&Time.log A detailed log file, shows each file which failed a specific test. Internal AuditTestShell-TestInt-date&time.log the shell passes in this log4j logger for test internal logging. The detail files contain the summary result. If there were failures, each item which failed is separately listed (see below)","title":"Log"},{"location":"user/AuditTool/AuditToolOperation-1.0/#csv","text":"CSV files are output for easier analysis and collection. They follow the log files' naming conventions. Summary and detail log files have different data formats. The summary file contains: outcome path test_name Passed \\\\TBRCRS3\\Archive\\W1KG10190 No Files in Root Folder The detail file contains: error_number error_test path 104 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 fails files only test. \\\\TBRCRS3\\Archive\\W1KG10190 103 Image group folder \\\\TBRCRS3\\Archive\\W1KG10190\\archive\\W1KG10190-I1KG10192 contains directory S0001491.JOB-A \\\\TBRCRS3\\Archive\\W1KG10190 Note that the path which failed the test is given as a separate data element: there is no obligation that the error message contain the path, and separating the path allows for easier data access.","title":"CSV"},{"location":"user/AuditTool/AuditToolOperation-1.0/#principles-of-operation","text":"Audit tool's initial release runs every test in the test library tests against a complete work. There is no provision yet for running a test against a single image group or subdirectory of a work.","title":"Principles of operation"},{"location":"user/AuditTool/AuditToolOperation-1.0/#property-file","text":"shell.properties Audit tool reads several variables from its property file shell.properties which is found in the same subdirectory as the shell jar file. These properties locate the tests and define parameters which the tests need, such as the folder names of parents of image groups. log4j2.properties Values relating to logging and output appear here. You can configure the parent folder of log files, their formats and file names.","title":"Property file"},{"location":"user/AuditTool/AuditToolOperation-1.0/#overriding-properties","text":"As a user, you can override shell.properties properties by creating a file $HOME/.config/bdrc/auditTool/user.properties where $HOME stands for your login directory. As a system administrator, you can override any property (even overriding user properties!) by defining them in the [JavaOptions] options section of INSTALL_DIR/app/audit-tool.cfg file. (where INSTALL_DIR is the location where the system installed Audit tool ) See Audit Tool Install 1.0 Guide In this example, we're overriding MaximumImageFileSize property in the to a value slightly smaller than the default. .... [JavaOptions] .... java-options=-DMaximumImageFileSize=300k ... Note the evaluation is one-pass. You cannot override the default user.properties file on the command line. This will not cause the values of 'other_config.properties' to be read in. Command line properties are always read last. Detailed examples are given in Appendix I.","title":"Overriding properties"},{"location":"user/AuditTool/AuditToolOperation-1.0/#test-output","text":"The tests themselves do not output results. The test framework allows the shell to iterate over the results and act on them. Initially, these are sent to log files, but we could send them to a database without changing any code, by reconfiguring the logging to send to a database. You can toggle on and off logging by changing comment status as described in the log4j2.properties file.","title":"Test output"},{"location":"user/AuditTool/AuditToolOperation-1.0/#test-internal-logging","text":"To trace tests' internal logs, each test gets passed in an internal logger whose name is its class name. The logger which handles these are in the log4j2.properties file in the section logger.testLogger.name=io.bdrc.am.audit.audittests To reduce output, this logger's appender is set to null, as shown here: # --------------------- Test Internals logging --------------- appender.testInternals.name=testInternalsName # # To activate internal test logging, uncomment this line, and comment out # the remaining testInternals lines appender.testInternals.type=Null # To activate internal test logging, comment the previous line, and uncomment the next stanza # appender.testInternals.type=File # appender.testInternals.append=false # appender.testInternals.fileName=${logPrefix}-${TestInt}-${date:yyyy-MM-dd-HH-mm-ss}.log # appender.testInternals.layoutString.type = PatternLayout # appender.testInternals.layoutString.pattern=%d{yyyy-MM-dd HH.mm.ss} %-5p %m :%C:%n # # --------------------- end Test Internals logging ----------------","title":"Test Internal logging"},{"location":"user/AuditTool/AuditToolOperation-1.0/#appendix-i","text":"","title":"Appendix I"},{"location":"user/AuditTool/AuditToolOperation-1.0/#property-overriding-example","text":"In this example, we test a work overriding the MaximumImageFileSize property. This example shows runs that use: - the default property - a much smaller value, defined in user.properties - an override of that smaller value defined in the system parameters (for administrators only). Ex 1. No user.properties file, shell.properties value of 400K used. Tests pass \u276f ls -l ~/.config/bdrc/auditTool/user.properties gls: cannot access '/Users/XXX/.config/bdrc/auditTool/user.properties': No such file or directory \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 2. Using User.properties Here, the default is set to 40K, and the Image file size test fails. \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=40K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs Ex 3: Raising the user properties value \u276f grep MaximumImage ~/.config/bdrc/auditTool/user.properties MaximumImageFileSize=300K \u276f audittool.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Ex 4: Overriding user.properties with VM arguments In this example, we've defined a much smaller argument in INSTALL_DIR/app/audit-tool.cfg , and the test fails. \u276f grep Maximum /opt/audit-tool/app/audit-tool.cfg java-option=-DMaximumImageFileSize=30K \u276f ./use_vm_args_to_override.sh -l . ../../Archive/W8LS68226 starting -l . ../../Archive/W8LS68226 INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Archive EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No Files in Root Folder INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Image EXIF Test INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 Web Image Attributes INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 No folders allowed in Image Group folders INFO Passed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Sequence Test ERROR Failed /Users/jimk/dev/tmp/at/test/../../Archive/W8LS68226 File Size Test Errors! returned:1: check logs","title":"Property overriding example"},{"location":"user/AuditTool/AuditToolOperation-1.0/#updates","text":"Date Notes 4 Nov 2020 Add Warning semantics. For some tests, if a required directory does not exist, the test should not fail. (For example, the ImageSizeTest test requires the folder image to exist. If it does not, the test cannot be said to fail, since it was never run. Cases where this occurs generate a test result of WARN. Files which would have been renamed PASS or FAIL are now renamed WARN--... in the case when some tests succeeded and some had warnings. The return code of audittool also accommodates this extension. If any test failed outright, the return code from audittool is 1. If all tests succeeded, or some tests succeeded, while some generated warnings, audittool returns 0 (as if all tests succeeded) 2021-05-14 Add overrides of properties 26 Jan 2022 Added platform install changes to configuration. Removed external test and test development - Still in 0.9 Operation","title":"Updates"},{"location":"user/AuditTool/Install-0.9/","text":"Audit Tool Installation Current VER is 0.9 Current REL is SNAPSHOT-1 Supported Platforms Windows 10 with Powershell 3.0 and above Mac OS X 10.14 (High Sierra) with Bash 4 ( requires gnu coreutils ) Debian 10 Note A shell script ending in .sh has the same name on windows, but the suffix .ps1 Download Releases are available on asset-manager-code Releases Download: - audit-test-shell-VER-REL-Install.zip Install Install procedures Identify a target directory and unzip audit-test-shell-VER-REL-Install.zip into it. This directory will be known as AT_INSTALL_HOME Please refer to \"Updating Guidelines\" Configuration Sample Run Configuration is performed by running $AT_INSTALL_HOME/audit-tool-config.sh A sample run is shown below: ```bash \u276f audit-tool-config.sh This script prompts you for a file path and saves the answers in '.../.config/bdrc/auditTool/config'. It asks for the jar file which runs the whole process. You press [Enter] to accept the defaults. Press [Enter] when you are ready to continue. Enter the path to the jar file which launches the process [ default \".../xxx/audit-test-shell-0.9-SNAPSHOT-1.jar\" ]? ``` Walkthrough audit-tool-config.sh sets environment variables which the running script, audittool.sh refers to: CONFIG_SHELL_JAR_FILE: the file name of the .JAR which launches the tests and logs their results. CONFIG_ATHOME: The folder in which Audit Tool is installed. This is useful, because it allows you to move audittool.sh into your path, and it will still run the jar file in the configured path. Since audit-tool-config.sh stores preferences in a per-user folder, you might want to create a template which saves these variables. You do this by editing $AT_INSTALL_HOME/DEFAULT-BDRC-AT-CONFIG.sh When you know the location of the downloaded files. Installation troubleshooting The configuration will fail: - if you have no existing per-user config file, - and no default config file, - and you do not type values in at the prompts. It also warns if the files you enter don't exist, but writes the values anyway, expecting you'll get around to it later. Guidelines for Updating an existing installation Installation overwrites any prior installations. It is advisable to unzip an update into a scratch directory and merge any site customizations into it before making it available on a server.","title":"Installation"},{"location":"user/AuditTool/Install-0.9/#audit-tool-installation","text":"Current VER is 0.9 Current REL is SNAPSHOT-1","title":"Audit Tool Installation"},{"location":"user/AuditTool/Install-0.9/#supported-platforms","text":"Windows 10 with Powershell 3.0 and above Mac OS X 10.14 (High Sierra) with Bash 4 ( requires gnu coreutils ) Debian 10 Note A shell script ending in .sh has the same name on windows, but the suffix .ps1","title":"Supported Platforms"},{"location":"user/AuditTool/Install-0.9/#download","text":"Releases are available on asset-manager-code Releases Download: - audit-test-shell-VER-REL-Install.zip","title":"Download"},{"location":"user/AuditTool/Install-0.9/#install","text":"","title":"Install"},{"location":"user/AuditTool/Install-0.9/#install-procedures","text":"Identify a target directory and unzip audit-test-shell-VER-REL-Install.zip into it. This directory will be known as AT_INSTALL_HOME Please refer to \"Updating Guidelines\"","title":"Install procedures"},{"location":"user/AuditTool/Install-0.9/#configuration","text":"","title":"Configuration"},{"location":"user/AuditTool/Install-0.9/#sample-run","text":"Configuration is performed by running $AT_INSTALL_HOME/audit-tool-config.sh A sample run is shown below: ```bash \u276f audit-tool-config.sh This script prompts you for a file path and saves the answers in '.../.config/bdrc/auditTool/config'. It asks for the jar file which runs the whole process. You press [Enter] to accept the defaults. Press [Enter] when you are ready to continue. Enter the path to the jar file which launches the process [ default \".../xxx/audit-test-shell-0.9-SNAPSHOT-1.jar\" ]? ```","title":"Sample Run"},{"location":"user/AuditTool/Install-0.9/#walkthrough","text":"audit-tool-config.sh sets environment variables which the running script, audittool.sh refers to: CONFIG_SHELL_JAR_FILE: the file name of the .JAR which launches the tests and logs their results. CONFIG_ATHOME: The folder in which Audit Tool is installed. This is useful, because it allows you to move audittool.sh into your path, and it will still run the jar file in the configured path. Since audit-tool-config.sh stores preferences in a per-user folder, you might want to create a template which saves these variables. You do this by editing $AT_INSTALL_HOME/DEFAULT-BDRC-AT-CONFIG.sh When you know the location of the downloaded files.","title":"Walkthrough"},{"location":"user/AuditTool/Install-0.9/#installation-troubleshooting","text":"The configuration will fail: - if you have no existing per-user config file, - and no default config file, - and you do not type values in at the prompts. It also warns if the files you enter don't exist, but writes the values anyway, expecting you'll get around to it later.","title":"Installation troubleshooting"},{"location":"user/AuditTool/Install-0.9/#guidelines-for-updating-an-existing-installation","text":"Installation overwrites any prior installations. It is advisable to unzip an update into a scratch directory and merge any site customizations into it before making it available on a server.","title":"Guidelines for Updating an existing installation"},{"location":"user/AuditTool/Install-1.0/","text":"Audit Tool Installation New In Version 1.0 Version 1.0 is built and packaged under the most current LTS (Long Term Support) version of Java, 17. It exploits a packaging utility which provides native installation packages on supported MacOS, Debian, and Windows 10 platforms. This provides: No requirement for pre-installed Java - Audit-tool provides its own JRE (Java Runtime Engine), at JRE 17.3 No need to configure a new install. Much simpler configuration: shell and Powershell scripts are no longer required. Version Information Use these values of VER and REL where they appear below: Current VER is 1.0 Current REL is alpha Supported Platforms Windows 10 Mac OS X 11.6 (Big Sur) or earlier 11. MacOS 10 version have not been tested. Debian 10 (Buster) Note : Release 1.0-alpha does not require supporting packages such as: - Powershell 3.0 on windows - gnu coreutils on MacOS - Java Download Releases are available to download on asset-manager-code Releases Download: Windows download Debian download MacOS download Installation Windows installation Run the launcher audit-tool-1.0.exe Note if the installer fails to launch within a minute, it may be because there is an existing audit-tool installation. Use Settings | Control Panel | Apps | Uninstall programs to remove it. Note The installer may take a few moments to launch, or to show a selection of folders, if that option is chosen (see below) If audit tool was installed when you launched, you mAY have an opportunity to choose your action: You can choose your installation directory: Note if you choose the default installation directory, audit-tool will be available to all users of the computer on which it is installed. Setting path audit-tool still needs to be launched from a console window (such as Windows Terminal or Fluent Terminal ). You may find it helpful to add its location to your PATH. Settings (You can reach this with the shortcut WindowsKey+Pause) --> find Edit Environment variables Select 'Path' and click 'Edit' as shown here: You'll see each line. Add the line of the installation directory. You will see a table of your environment variables. Add the last line (the default installation is shown as an example) MacOS installation Open the downloaded package: and drag 'audit-tool.app' to '/Applications' Debian installation Values in this table are referred to in the instruction as {Property} . (eg, {Package name} ) Property Value Application name audit-tool Application version 1.0-alpha Package name audit-v1 Package-Release 1 Package File name audit-v1_1.0-alpha-1_amd64.deb Install location /opt/audit-v1 Executable /opt/audit-v1/bin/audit-tool Download: TODO: web loc audit-v1_1.0-alpha-1_amd64.deb into some_folder Install: sudo apt install -f some_folder/audit-v1_1.0-alpha-1_amd64.deb This creates a package in the Install location above, overwriting existing contents and configurations. There are several options for general user access: 1. Add /opt/{Package Name}/bin to the path of any users who use it. 2. Create a symbolic link in a generally public path: ln -s /opt/{Package name}/bin/audit-tool 3. Use the update-alternatives scheme to install the version into a list of choices (to allow multiple global installations). While this is more cumbersome, it is more sysadmin friendly than writing directly into /usr/local/bin. It also automatically creates a link into any directory you choose (in this example, we use /usr/local/bin , but you're free to create your own distribution means.) Suppose you want to install a new version and retain the older one. Since BDRC always changes the package name on every release, you would install them separately. For this example, we've installed two versions: audit-tool-v1 and audit-tool-v1.1 To configure for easy change over, we would: $ sudo update-alternatives --install /usr/local/bin/audit-tool audit-tool /opt/audit-v1/bin/audit-tool 50 $ sudo update-alternatives --install /usr/local/bin/audit-tool audit-tool /opt/audit-v1.1/bin/audit-tool 55 You can see the results here, by invoking the config switcher: $ sudo update-alternatives --config audit-tool There are 2 choices for the alternative audit-tool (providing /usr/local/bin/audit-tool). Selection Path Priority Status ------------------------------------------------------------ * 0 /opt/audit-v1.1/bin/audit-tool 55 auto mode 1 /opt/audit-v1.1/bin/audit-tool 55 manual mode 2 /opt/audit-v1/bin/audit-tool 50 manual mode Press <enter> to keep the current choice[*], or type selection number: You would simply press 1 or 2 here to change the versions you want users to run. Configuration This section applies to all platforms. audit-tool now uses the app/ subfolder of its installation directory for all its configuration. This file is generated by the install process. Changes you make to it will be overwritten when the application is re-installed. This configuration replaces the AT_HOME and CONFIG_ATHOME settings of prior releases. Users with write permission can simply edit the app/ files: File Purpose audit-tool.cfg Generated list of complete properties to launch the application. Changes to this list are unsupported shell.properties Parameters for tests (such as names of directories, limits and error overrides) log4j2.properties Logging control Detailed configuration is described in AuditToolOperation-1.0-alpha.md Guidelines for Updating an existing installation Installation overwrites any prior installations. It is advisable to save existing configurations in the app/ folder of the install and * carefully merge them into a new install.","title":"Installation"},{"location":"user/AuditTool/Install-1.0/#audit-tool-installation","text":"","title":"Audit Tool Installation"},{"location":"user/AuditTool/Install-1.0/#new-in-version-10","text":"Version 1.0 is built and packaged under the most current LTS (Long Term Support) version of Java, 17. It exploits a packaging utility which provides native installation packages on supported MacOS, Debian, and Windows 10 platforms. This provides: No requirement for pre-installed Java - Audit-tool provides its own JRE (Java Runtime Engine), at JRE 17.3 No need to configure a new install. Much simpler configuration: shell and Powershell scripts are no longer required.","title":"New In Version 1.0"},{"location":"user/AuditTool/Install-1.0/#version-information","text":"Use these values of VER and REL where they appear below: Current VER is 1.0 Current REL is alpha","title":"Version Information"},{"location":"user/AuditTool/Install-1.0/#supported-platforms","text":"Windows 10 Mac OS X 11.6 (Big Sur) or earlier 11. MacOS 10 version have not been tested. Debian 10 (Buster) Note : Release 1.0-alpha does not require supporting packages such as: - Powershell 3.0 on windows - gnu coreutils on MacOS - Java","title":"Supported Platforms"},{"location":"user/AuditTool/Install-1.0/#download","text":"Releases are available to download on asset-manager-code Releases Download:","title":"Download"},{"location":"user/AuditTool/Install-1.0/#windows-download","text":"","title":"Windows download"},{"location":"user/AuditTool/Install-1.0/#debian-download","text":"","title":"Debian download"},{"location":"user/AuditTool/Install-1.0/#macos-download","text":"","title":"MacOS download"},{"location":"user/AuditTool/Install-1.0/#installation","text":"","title":"Installation"},{"location":"user/AuditTool/Install-1.0/#windows-installation","text":"","title":"Windows installation"},{"location":"user/AuditTool/Install-1.0/#run-the-launcher-audit-tool-10exe","text":"Note if the installer fails to launch within a minute, it may be because there is an existing audit-tool installation. Use Settings | Control Panel | Apps | Uninstall programs to remove it. Note The installer may take a few moments to launch, or to show a selection of folders, if that option is chosen (see below) If audit tool was installed when you launched, you mAY have an opportunity to choose your action: You can choose your installation directory: Note if you choose the default installation directory, audit-tool will be available to all users of the computer on which it is installed.","title":"Run the launcher audit-tool-1.0.exe"},{"location":"user/AuditTool/Install-1.0/#setting-path","text":"audit-tool still needs to be launched from a console window (such as Windows Terminal or Fluent Terminal ). You may find it helpful to add its location to your PATH. Settings (You can reach this with the shortcut WindowsKey+Pause) --> find Edit Environment variables Select 'Path' and click 'Edit' as shown here: You'll see each line. Add the line of the installation directory. You will see a table of your environment variables. Add the last line (the default installation is shown as an example)","title":"Setting path"},{"location":"user/AuditTool/Install-1.0/#macos-installation","text":"Open the downloaded package: and drag 'audit-tool.app' to '/Applications'","title":"MacOS installation"},{"location":"user/AuditTool/Install-1.0/#debian-installation","text":"Values in this table are referred to in the instruction as {Property} . (eg, {Package name} ) Property Value Application name audit-tool Application version 1.0-alpha Package name audit-v1 Package-Release 1 Package File name audit-v1_1.0-alpha-1_amd64.deb Install location /opt/audit-v1 Executable /opt/audit-v1/bin/audit-tool Download: TODO: web loc audit-v1_1.0-alpha-1_amd64.deb into some_folder Install: sudo apt install -f some_folder/audit-v1_1.0-alpha-1_amd64.deb This creates a package in the Install location above, overwriting existing contents and configurations. There are several options for general user access: 1. Add /opt/{Package Name}/bin to the path of any users who use it. 2. Create a symbolic link in a generally public path: ln -s /opt/{Package name}/bin/audit-tool 3. Use the update-alternatives scheme to install the version into a list of choices (to allow multiple global installations). While this is more cumbersome, it is more sysadmin friendly than writing directly into /usr/local/bin. It also automatically creates a link into any directory you choose (in this example, we use /usr/local/bin , but you're free to create your own distribution means.) Suppose you want to install a new version and retain the older one. Since BDRC always changes the package name on every release, you would install them separately. For this example, we've installed two versions: audit-tool-v1 and audit-tool-v1.1 To configure for easy change over, we would: $ sudo update-alternatives --install /usr/local/bin/audit-tool audit-tool /opt/audit-v1/bin/audit-tool 50 $ sudo update-alternatives --install /usr/local/bin/audit-tool audit-tool /opt/audit-v1.1/bin/audit-tool 55 You can see the results here, by invoking the config switcher: $ sudo update-alternatives --config audit-tool There are 2 choices for the alternative audit-tool (providing /usr/local/bin/audit-tool). Selection Path Priority Status ------------------------------------------------------------ * 0 /opt/audit-v1.1/bin/audit-tool 55 auto mode 1 /opt/audit-v1.1/bin/audit-tool 55 manual mode 2 /opt/audit-v1/bin/audit-tool 50 manual mode Press <enter> to keep the current choice[*], or type selection number: You would simply press 1 or 2 here to change the versions you want users to run.","title":"Debian installation"},{"location":"user/AuditTool/Install-1.0/#configuration","text":"This section applies to all platforms. audit-tool now uses the app/ subfolder of its installation directory for all its configuration. This file is generated by the install process. Changes you make to it will be overwritten when the application is re-installed. This configuration replaces the AT_HOME and CONFIG_ATHOME settings of prior releases. Users with write permission can simply edit the app/ files: File Purpose audit-tool.cfg Generated list of complete properties to launch the application. Changes to this list are unsupported shell.properties Parameters for tests (such as names of directories, limits and error overrides) log4j2.properties Logging control Detailed configuration is described in AuditToolOperation-1.0-alpha.md","title":"Configuration"},{"location":"user/AuditTool/Install-1.0/#guidelines-for-updating-an-existing-installation","text":"Installation overwrites any prior installations. It is advisable to save existing configurations in the app/ folder of the install and * carefully merge them into a new install.","title":"Guidelines for Updating an existing installation"}]}